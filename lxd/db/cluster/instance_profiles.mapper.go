//go:build linux && cgo && !agent

package cluster

// The code below was generated by lxd-generate - DO NOT EDIT!

import (
	"context"
	"database/sql"
	"fmt"

	"github.com/lxc/lxd/lxd/db/query"
	"github.com/lxc/lxd/shared/api"
)

var _ = api.ServerEnvironment{}

var instanceProfileObjectsByProfileID = RegisterStmt(`
SELECT instances_profiles.instance_id, instances_profiles.profile_id, instances_profiles.apply_order
  FROM instances_profiles
  WHERE instances_profiles.profile_id = ? ORDER BY instances_profiles.instance_id, instances_profiles.apply_order
`)

// GetProfileInstances returns all available Instances for the Profile.
// generator: instance_profile GetMany
func GetProfileInstances(ctx context.Context, tx *sql.Tx, profileID int) ([]Instance, error) {
	var err error

	// Result slice.
	objects := make([]InstanceProfile, 0)

	sqlStmt := stmt(tx, instanceProfileObjectsByProfileID)
	args := []any{profileID}

	// Dest function for scanning a row.
	dest := func(i int) []any {
		objects = append(objects, InstanceProfile{})
		return []any{
			&objects[i].InstanceID,
			&objects[i].ProfileID,
			&objects[i].ApplyOrder,
		}
	}

	// Select.
	err = query.SelectObjects(sqlStmt, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"instances_profiles\" table: %w", err)
	}

	result := make([]Instance, len(objects))
	for i, object := range objects {
		instance, err := GetInstances(ctx, tx, InstanceFilter{ID: &object.InstanceID})
		if err != nil {
			return nil, err
		}

		result[i] = instance[0]
	}

	return result, nil
}
